<!DOCTYPE html>
<html>
<head>
    <title>Quarter Commit Snapshot</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Mar 30 2017 14:22:33 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Mar 30 2017 14:22:33 GMT-0700 (PDT)";
        var CHECKSUM = 52557604784;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/* FileSaver.js
 *  A saveAs() FileSaver implementation.
 *  2014-05-27
 *
 *  By Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
    "use strict";
    // IE <10 is explicitly unsupported
    if (typeof navigator !== "undefined" &&
        /MSIE [1-9]\./.test(navigator.userAgent)) {
        return;
    }
    var
          doc = view.document
          // only get URL when necessary in case Blob.js hasn't overridden it yet
        , get_URL = function() {
            return view.URL || view.webkitURL || view;
        }
        , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
        , can_use_save_link = !view.externalHost && "download" in save_link
        , click = function(node) {
            var event = doc.createEvent("MouseEvents");
            event.initMouseEvent(
                "click", true, false, view, 0, 0, 0, 0, 0
                , false, false, false, false, 0, null
            );
            node.dispatchEvent(event);
        }
        , webkit_req_fs = view.webkitRequestFileSystem
        , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
        , throw_outside = function(ex) {
            (view.setImmediate || view.setTimeout)(function() {
                throw ex;
            }, 0);
        }
        , force_saveable_type = "application/octet-stream"
        , fs_min_size = 0
        , deletion_queue = []
        , process_deletion_queue = function() {
            var i = deletion_queue.length;
            while (i--) {
                var file = deletion_queue[i];
                if (typeof file === "string") { // file is an object URL
                    get_URL().revokeObjectURL(file);
                } else { // file is a File
                    file.remove();
                }
            }
            deletion_queue.length = 0; // clear queue
        }
        , dispatch = function(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            var i = event_types.length;
            while (i--) {
                var listener = filesaver["on" + event_types[i]];
                if (typeof listener === "function") {
                    try {
                        listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                        throw_outside(ex);
                    }
                }
            }
        }
        , FileSaver = function(blob, name) {
            // First try a.download, then web filesystem, then object URLs
            var
                  filesaver = this
                , type = blob.type
                , blob_changed = false
                , object_url
                , target_view
                , get_object_url = function() {
                    var object_url = get_URL().createObjectURL(blob);
                    deletion_queue.push(object_url);
                    return object_url;
                }
                , dispatch_all = function() {
                    dispatch(filesaver, "writestart progress write writeend".split(" "));
                }
                // on any filesys errors revert to saving with object URLs
                , fs_error = function() {
                    // don't create more object URLs than needed
                    if (blob_changed || !object_url) {
                        object_url = get_object_url(blob);
                    }
                    if (target_view) {
                        target_view.location.href = object_url;
                    } else {
                        window.open(object_url, "_blank");
                    }
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                }
                , abortable = function(func) {
                    return function() {
                        if (filesaver.readyState !== filesaver.DONE) {
                            return func.apply(this, arguments);
                        }
                    };
                }
                , create_if_not_found = {create: true, exclusive: false}
                , slice
            ;
            filesaver.readyState = filesaver.INIT;
            if (!name) {
                name = "download";
            }
            if (can_use_save_link) {
                object_url = get_object_url(blob);
                save_link.href = object_url;
                save_link.download = name;
                click(save_link);
                filesaver.readyState = filesaver.DONE;
                dispatch_all();
                return;
            }
            // Object and web filesystem URLs have a problem saving in Google Chrome when
            // viewed in a tab, so I force save with application/octet-stream
            // http://code.google.com/p/chromium/issues/detail?id=91158
            if (view.chrome && type && type !== force_saveable_type) {
                slice = blob.slice || blob.webkitSlice;
                blob = slice.call(blob, 0, blob.size, force_saveable_type);
                blob_changed = true;
            }
            // Since I can't be sure that the guessed media type will trigger a download
            // in WebKit, I append .download to the filename.
            // https://bugs.webkit.org/show_bug.cgi?id=65440
            if (webkit_req_fs && name !== "download") {
                name += ".download";
            }
            if (type === force_saveable_type || webkit_req_fs) {
                target_view = view;
            }
            if (!req_fs) {
                fs_error();
                return;
            }
            fs_min_size += blob.size;
            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                    var save = function() {
                        dir.getFile(name, create_if_not_found, abortable(function(file) {
                            file.createWriter(abortable(function(writer) {
                                writer.onwriteend = function(event) {
                                    target_view.location.href = file.toURL();
                                    deletion_queue.push(file);
                                    filesaver.readyState = filesaver.DONE;
                                    dispatch(filesaver, "writeend", event);
                                };
                                writer.onerror = function() {
                                    var error = writer.error;
                                    if (error.code !== error.ABORT_ERR) {
                                        fs_error();
                                    }
                                };
                                "writestart progress write abort".split(" ").forEach(function(event) {
                                    writer["on" + event] = filesaver["on" + event];
                                });
                                writer.write(blob);
                                filesaver.abort = function() {
                                    writer.abort();
                                    filesaver.readyState = filesaver.DONE;
                                };
                                filesaver.readyState = filesaver.WRITING;
                            }), fs_error);
                        }), fs_error);
                    };
                    dir.getFile(name, {create: false}, abortable(function(file) {
                        // delete file if it already exists
                        file.remove();
                        save();
                    }), abortable(function(ex) {
                        if (ex.code === ex.NOT_FOUND_ERR) {
                            save();
                        } else {
                            fs_error();
                        }
                    }));
                }), fs_error);
            }), fs_error);
        }
        , FS_proto = FileSaver.prototype
        , saveAs = function(blob, name) {
            return new FileSaver(blob, name);
        }
    ;
    FS_proto.abort = function() {
        var filesaver = this;
        filesaver.readyState = filesaver.DONE;
        dispatch(filesaver, "abort");
    };
    FS_proto.readyState = FS_proto.INIT = 0;
    FS_proto.WRITING = 1;
    FS_proto.DONE = 2;

    FS_proto.error =
    FS_proto.onwritestart =
    FS_proto.onprogress =
    FS_proto.onwrite =
    FS_proto.onabort =
    FS_proto.onerror =
    FS_proto.onwriteend =
        null;

    view.addEventListener("unload", process_deletion_queue, false);
    saveAs.unload = function() {
        process_deletion_queue();
        view.removeEventListener("unload", process_deletion_queue, false);
    };
    return saveAs;
}(
       typeof self !== "undefined" && self
    || typeof window !== "undefined" && window
    || this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('TSDateFlags',{
    extend: 'Ext.data.Model',
    
    fields: [
        { name: 'Date1', type: 'string'}, // Y,N
        { name: 'Date2', type: 'string' },
        { name: 'PlanEstimate1', type:'number'},
        { name: 'PlanEstimate2', type:'number'},
        { name: 'SelectedModel', type: 'object', sortType: 'asString'},
        { name: 'ArtifactHierarchy', type: 'string' },
    ],
    isSelectable: function() {
        return true;
    }
    
});
Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    saveCSVToFile:function(csv,file_name,type_object){
            if (type_object == undefined){
                type_object = {type:'text/csv;charset=utf-8'};
            }
            var blob = new Blob([csv],type_object);
            saveAs(blob,file_name);
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            limit:Infinity,
            pageSize: Infinity

        });
        
        var columns = grid.columns;
        var headers = this._getHeadersFromGrid(grid);
        var column_names = this._getColumnNamesFromGrid(grid);
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                csv.push('"' + headers.join('","') + '"');
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },

    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGridWithPaging: function(grid) {
        var deferred = Ext.create('Deft.Deferred');


        var store = Ext.create('Rally.data.custom.Store',{
            model: grid.getStore().config.model,
            filters: grid.getStore().config.filters,
            limit:Infinity,
            pageSize: Infinity
        });

        var columns = grid.columns;
        var headers = this._getHeadersFromGrid(grid);
        var column_names = this._getColumnNamesFromGrid(grid);
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        // for (var page = 1; page <= pages; page ++ ) {
        //     promises.push(this.loadStorePage(grid, store, columns, page, pages));
        // }

        promises.push(this.loadStorePage(grid, store, columns, page, pages));

        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                csv.push('"' + headers.join('","') + '"');
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;

        // var headers = this._getHeadersFromGrid(grid);
        
        // var columns = grid.columns;
        // var column_names = this._getColumnNamesFromGrid(grid);

       
        // var csv = [];
        // csv.push('"' + headers.join('","') + '"');

        // var number_of_records = store.getTotalCount();
        
        // this.logger.log("Number of records to export:", number_of_records);
        
        // for (var i = 0; i < number_of_records; i++) {
        //     var record = store.getAt(i);
        //     if ( ! record ) {
        //         this.logger.log("Number or lines in CSV:", csv.length);
        //         return csv.join('\r\n');            }
        //     csv.push( this._getCSVFromRecord(record, grid, store) );
        // }
        
        // this.logger.log("Number or lines in CSV:", csv.length);
        // return csv.join('\r\n');
    },

    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid) {
    var deferred = Ext.create('Deft.Deferred');
            var me = this;
            
            Rally.getApp().setLoading("Assembling data for export...");
            
            var headers = this._getHeadersFromGrid(grid);
            var store = Ext.clone( grid.getStore() );
            var columns = grid.columns;
            var column_names = this._getColumnNamesFromGrid(grid);
            
            var record_count = grid.getStore().getTotalCount();
            var original_page_size = grid.getStore().pageSize;
            
            var page_size = 20000;
            var number_of_pages = Math.ceil(record_count/page_size);
            store.pageSize = page_size;
            
            var pages = [],
                promises = [];

            for (var page = 1; page <= number_of_pages; page ++ ) {
                pages.push(page);
            }
            
            Ext.Array.each(pages, function(page) {
                promises.push(function() { 
                    return me._loadStorePage(grid, store, columns, page, pages.length )
                });
            });
            
            Deft.Chain.sequence(promises).then({
                success: function(csvs){

                    // set page back to last view
                    store.pageSize = original_page_size;
                    store.loadPage(1);
                    
                    var csv = [];
                    csv.push('"' + headers.join('","') + '"');
                    _.each(csvs, function(c){
                        _.each(c, function(line){
                            csv.push(line);
                        });
                    });
                    csv = csv.join('\r\n');
                    deferred.resolve(csv);
                    Rally.getApp().setLoading(false);
                }
            });
            
            return deferred.promise;
    },
    


    _loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                for (var i = 0; i < records.length; i++) {
                    // if(i==0){
                    //     Rally.getApp().setLoading("Loading page "+page+ " of "+total_pages);
                    // }
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        this.logger.log("_loadStorePage", page, " of ", total_pages);
        return deferred.promise;
    },


    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid);
        }
        
        return this._getCSVFromCustomBackedGrid(grid);
    },

    loadStorePage: function(grid, store, columns, page, total_pages){
        console.log('Inside loadStorePage');
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records, operation, success) {
                //console.log(' page records length',records.length,'success',success);
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        //console.log('inside _getCSVFromRecord');
        Ext.Array.each(columns, function (column) {
            if (column.xtype != 'rallyrowactioncolumn') {
                if (column.dataIndex) {
                    var column_name = column.dataIndex;
                    
                    var display_value = record.get(column_name);

                    if (!column._csvIgnoreRender && column.renderer) {
                        if (column.exportRenderer) {
                            display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                        } else {
                            display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                        }
                    }
                    node_values.push(display_value);
                } else {
                    var display_value = null;
                    if (!column._csvIgnoreRender && column.renderer) {
                        if (column.exportRenderer) {
                            display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                        } else {
                            display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                        }
                        node_values.push(display_value);
                    }
                }

            }
        }, this);
        //console.log('Node values',node_values);
        return '"' + node_values.join('","') + '"';
    }

});
Ext.define("QCSApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box',layout:{type:'hbox'}},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "QCSApp"
    },
    


    _getAlwaysSelectedFields: function() {
        var columns = this.getSetting('columnNames') ;
                
        if ( Ext.isEmpty(columns) ) {
            return [];
        }
        
        if ( Ext.isString(columns) ) {
            return columns.split(',');
        }
        
        // console.log('_getAlwaysSelectedFields',columns);
        return Ext.Array.unique( columns );
    },

    getSettingsFields: function() {
        var me = this;
        return [{
            xtype: 'rallyfieldpicker',
            name: 'columnNames',
            autoExpand: true,
            modelTypes: ['HierarchicalRequirement','PortfolioItem/Feature','Defect'],
            alwaysSelectedValues: ['FormattedID','Name'],
            fieldBlackList: ['Attachments','UserStories','Children','PredecessorsAndSuccessors','Dependencies']
        }];
    },
    launch: function() {
        var me = this;
        me.fetchFields = me._getFetchFields();
        me._addSelector();
    },

    _addSelector: function(){
        var me = this;
        var type_filters = Rally.data.wsapi.Filter.or([
                {property: 'TypePath', value: 'HierarchicalRequirement'},
                {property: 'TypePath', value: 'PortfolioItem/Feature'},
                {property: 'TypePath', value: 'Defect'}
            ]);

        me.down('#selector_box').add(
        [{
            xtype: 'rallyreleasecombobox',
            margin:10,
            itemId:'selected_release',
            listeners:{
                ready:function(rrcb){
                    // Add 3 weeks to date 1.
                    newDate1 = new Date(rrcb.getRecord().get('ReleaseStartDate'));
                    newDate1.setDate(newDate1.getDate()+21);
                    me.down('#date_1').setValue(newDate1);
                },
                select:function(rrcb){
                    // Add 3 weeks to date 1.
                    newDate1 = new Date(rrcb.getRecord().get('ReleaseStartDate'));
                    newDate1.setDate(newDate1.getDate()+21);
                    me.down('#date_1').setValue(newDate1);                
                },
                change:function(rrcb){
                    // Add 3 weeks to date 1.
                    newDate1 = new Date(rrcb.getRecord().get('ReleaseStartDate'));
                    newDate1.setDate(newDate1.getDate()+21);
                    me.down('#date_1').setValue(newDate1);                
                }                
            }
        }]);

        me.down('#selector_box').add(
        [{
            name: 'type',
            xtype: 'rallycombobox',
            itemId:'artifact_type',
            allowBlank: false,
            autoSelect: false,
            fieldLabel: 'Type:',
            labelWidth: 35,
            value: 'PortfolioItem/Feature',
            margin:10,
            storeConfig: {
                model: Ext.identityFn('TypeDefinition'),
                sorters: [{ property: 'DisplayName' }],
                fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable'],
                filters: type_filters,
                autoLoad: true,
                remoteSort: false,
                remoteFilter: true
            },
            displayField: 'DisplayName',
            valueField: 'TypePath',
            readyEvent: 'ready'
        }
        ,{
            xtype: 'datefield',
            anchor: '100%',
            fieldLabel: 'Date 1',
            name: 'date_1',
            itemId:'date_1',
            labelWidth: 40,
            maxValue: new Date(),  // limited to the current date or prior
            margin:10
        }, {
            xtype: 'datefield',
            anchor: '100%',
            fieldLabel: 'Date 2',
            name: 'date_2',
            itemId:'date_2',
            labelWidth: 40,
            value: new Date(),  // defaults to today
            margin:10
        },{
            name: 'showChanged',
            itemId: 'showChanged',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin:10,
            boxLabel: 'Show changed',
            checked: true
        }]);

        me.down('#selector_box').add({
            xtype: 'rallybutton',
            text: 'Go!',
            // width: 200,
            margin:10,
            cls: 'primary',
            listeners: {
                click: function(){
                    var cb = me.down('rallyreleasecombobox');
                    if ( cb ) {
                        me.release = cb.getRecord();
                    }
                    me._getReleaseObjectIDs();
                },
                scope: me
            }
        });

    },

    _getReleaseObjectIDs: function() {
        var me = this;
        me.logger.log('_getReleaseObjectIDs');
        Deft.Chain.parallel([
            me._getReleases
        ],me).then({
            scope: me,
            success: function(results1) {
                me.logger.log('Results:',results1);

                var date1 = me.down('#date_1').value;
                var date2 = me.down('#date_2').value;
                me.logger.log(date1,date2);

                me.release_oids = Ext.Array.map(results1[0], function(release) {
                    return release.get('ObjectID');
                });
                
                me.setLoading(true);

                Deft.Promise.all([
                    me._getDataFromSnapShotStore(date1),
                    me._getDataFromSnapShotStore(date2) 
                ],me).then({
                    scope: me,
                    success: function(results2){
                        var both = _.union(results2[0],results2[1]);
                        var oids = [];
                        Ext.Array.each(both,function(rec){
                            oids.push(rec.ObjectID);
                        })


                        Deft.Promise.all([
                            me._getDataFromSnapShotStoreByObjectIds(oids,date1),
                            me._getDataFromSnapShotStoreByObjectIds(oids,date2) 
                        ],me).then({ 
                            success: function(results3){
                                var object_ids = _.union(results3[0],results3[1]);
                                me.logger.log(object_ids);
                                me._getDataFromObjectIds(results3[0],results3[1],object_ids).then({
                                    success: function(records) {
                                        me.setLoading(false);
                                        me._displayGrid(records);
                                    },
                                    failure: function(error) {
                                        me.logger.log('Failed');
                                        me.setLoading(false);
                                        me.down('#display_box').removeAll();
                                        Rally.ui.notify.Notifier.showWarning({message: error});
                                    }
                                });

                            },
                            failure: function(error){
                                me.setLoading(false);
                                me._notifyError('Failed - Error');
                            }

                        });                        


                    },
                    failure: function(msg) {
                        Ext.Msg.alert('Failed',msg);
                    }
                });
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Loading Timebox data', msg);
            }
        });
    },

    _notifyError: function(error){

    },

    _getReleases:function(){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:");
        
        var filters = Ext.create('Rally.data.wsapi.Filter',{
            property: 'Name',
            operator: '=',
            value: this.release.get('Name')
        });


        Ext.create('Rally.data.wsapi.Store', {
            model: 'Release',
            fetch: ['ObjectID'],
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },


    
    _getDataFromSnapShotStore:function(date){
        var deferred = Ext.create('Deft.Deferred');

        var artifact_type = this.down('#artifact_type').value;

        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            "context": this.getContext().getDataContext(),
            "fetch": [ "PlanEstimate","LeafStoryPlanEstimateTotal","PlannedEndDate","Release"],
            "find": {
                    "_TypeHierarchy": artifact_type,
                    "Children": null,
                    "Release": { '$in': this.release_oids },
                    "__At": date,
            },
            "sort": { "_ValidFrom": -1 },
            "removeUnauthorizedSnapshots":true,
            "useHttpPost":true,
             "hydrate": ["Release"]
        });

        snapshotStore.load({
            callback: function(records, operation) {
               this.logger.log('Lookback Data>>>',records,operation);
               var object_ids = [];
                Ext.Array.each(records,function(rec){
                    object_ids.push({'ObjectID':rec.get('ObjectID'),'PlanEstimate':rec.get('PlanEstimate'),'LeafStoryPlanEstimateTotal':rec.get('LeafStoryPlanEstimateTotal'),'PlannedEndDate':rec.get('PlannedEndDate'),'Release':rec.get('Release')});
                });
                deferred.resolve(object_ids);
            },
            scope:this
        });
    
        return deferred;
    },

    _getDataFromSnapShotStoreByObjectIds:function(oids,date){
        var deferred = Ext.create('Deft.Deferred');


        var artifact_type = this.down('#artifact_type').value;

        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            "context": this.getContext().getDataContext(),
            "fetch": [ "PlanEstimate","LeafStoryPlanEstimateTotal","PlannedEndDate","Release" ],
            "find": {
                    "_TypeHierarchy": artifact_type,
                    "Children": null,
                    "ObjectID": { '$in': oids },
                    "__At": date,
            },
            "sort": { "_ValidFrom": -1 },
            "removeUnauthorizedSnapshots":true,
            "useHttpPost":true,
            "hydrate": ["Release"]
        });

        snapshotStore.load({
            callback: function(records, operation) {
               this.logger.log('Lookback Data>>>',records,operation);
               var object_ids = [];
                Ext.Array.each(records,function(rec){
                    object_ids.push({'ObjectID':rec.get('ObjectID'),'PlanEstimate':rec.get('PlanEstimate'),'LeafStoryPlanEstimateTotal':rec.get('LeafStoryPlanEstimateTotal'),'PlannedEndDate':rec.get('PlannedEndDate'),'Release':rec.get('Release')});
                });
                deferred.resolve(object_ids);
            },
            scope:this
        });
    
        return deferred;
    },

    _getDataFromObjectIds:function(date1_ids,date2_ids,object_ids){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        me.logger.log('_getDataFromObjectIds>>',date1_ids,date2_ids,object_ids);
        var showChanged = me.down('#showChanged').value;
        if(0 == object_ids.length){
            deferred.reject('No Records found!!');
        }else{
            var model_name = me.down('#artifact_type').value;
            var model_filters = [];
            Ext.Array.each(object_ids,function(id){
                model_filters.push({property:'ObjectID',value:id.ObjectID});
            });

            model_filters = Rally.data.wsapi.Filter.or(model_filters);

            Ext.create('Rally.data.wsapi.Store', {
                model: model_name,
                filters: model_filters,
                enablePostGet:true,
                fetch:me.fetchFields,
                sorters: [
                    {
                        property: 'DragAndDropRank',
                        direction: 'ASC'
                    }
                ]

            }).load({
                callback : function(records, operation, successful) {
                    if (successful){

                        //Using Extended model
                        var model_with_dates = [];

                        Ext.Array.each(records, function(rec,index){

                            var hierarchy = {};
                            if(rec.get('_type') == "hierarchicalrequirement"){
                                var feature = rec.get('Feature');
                                hierarchy.html =  feature ? me._getFormattedIdByRecord(feature) + ' : ' + feature.Name : '';
                                hierarchy.html += feature && feature.Parent ? '<br/>'+ me._getFormattedIdByRecord(feature.Parent) + ' : ' + feature.Parent.Name:'';
                                hierarchy.html += feature && feature.Parent && feature.Parent.Parent? '<br/>'+ me._getFormattedIdByRecord(feature.Parent.Parent) + ' : ' + feature.Parent.Parent.Name:'';

                                hierarchy.text =  feature ? feature.FormattedID + ' : ' + feature.Name : '';
                                hierarchy.text += feature && feature.Parent ? '\r'+ feature.Parent.FormattedID + ' : ' + feature.Parent.Name:'';
                                hierarchy.text += feature && feature.Parent && feature.Parent.Parent? '\r'+ feature.Parent.Parent.FormattedID + ' : ' + feature.Parent.Parent.Name:'';

                            }else{
                                var parent = rec.get('Parent');
                                //hierarchy =  parent ? parent.FormattedID + ' : ' + parent.Name : '';
                                hierarchy.html =  parent ? me._getFormattedIdByRecord(parent) + ' : ' + parent.Name : '';
                                hierarchy.html += parent && parent.Parent ? '<br/>'+ me._getFormattedIdByRecord(parent.Parent) + ' : ' + parent.Parent.Name:'';
                                hierarchy.html += parent && parent.Parent && parent.Parent.Parent? '<br/>'+ me._getFormattedIdByRecord(parent.Parent.Parent) + ' : ' + parent.Parent.Parent.Name:'';
                                
                                hierarchy.text =  parent ? parent.FormattedID + ' : ' + parent.Name : '';
                                hierarchy.text += parent && parent.Parent ? '\r'+ parent.Parent.FormattedID + ' : ' + parent.Parent.Name:'';
                                hierarchy.text += parent && parent.Parent && parent.Parent.Parent? '\r'+ parent.Parent.Parent.FormattedID + ' : ' + parent.Parent.Parent.Name:'';

                            }

                            var isInDate1Obj = _.find(date1_ids, { 'ObjectID': rec.get('ObjectID')});
                            var isInDate2Obj = _.find(date2_ids, { 'ObjectID': rec.get('ObjectID')});

                            var isInDate1, isInDate2, planEstimate1, planEstimate2,plannedEndDate1,plannedEndDate2;
                            var release1 = '--';
                            var release2 = '--';

                            isInDate1 = isInDate1Obj && isInDate1Obj.Release && (me.release.get('Name') == isInDate1Obj.Release.Name) ? 'Y' : 'N';
                            isInDate2 = isInDate2Obj && isInDate2Obj.Release && (me.release.get('Name') == isInDate2Obj.Release.Name) ? 'Y' : 'N';


                            if(model_name=="PortfolioItem/Feature"){
                                planEstimate1 = isInDate1Obj ? isInDate1Obj.LeafStoryPlanEstimateTotal : 0;
                                planEstimate2 = isInDate2Obj ? isInDate2Obj.LeafStoryPlanEstimateTotal : 0;

                            }else{
                                planEstimate1 = isInDate1Obj ? isInDate1Obj.PlanEstimate : 0;
                                planEstimate2 = isInDate2Obj ? isInDate2Obj.PlanEstimate : 0;                               
                            }

                            if(isInDate1Obj){
                                plannedEndDate1 = isInDate1Obj.PlannedEndDate;
                                release1 = isInDate1Obj && isInDate1Obj.Release ? isInDate1Obj.Release.Name : '--';
                            }

                            if(isInDate2Obj){
                                plannedEndDate2 = isInDate2Obj.PlannedEndDate;
                                release2 = isInDate2Obj && isInDate2Obj.Release ? isInDate2Obj.Release.Name : '--';
                            }

                            if(showChanged && isInDate1 == isInDate2){
                                return;
                            }

                            //if(!showChanged){

                                var with_date_flag = {
                                    Date1: isInDate1,
                                    Date2: isInDate2,
                                    PlanEstimate1: planEstimate1,
                                    PlanEstimate2: planEstimate2,
                                    ArtifactHierarchy: hierarchy,
                                    PlannedEndDate1: plannedEndDate1,
                                    PlannedEndDate2: plannedEndDate2,
                                    Release1: release1,
                                    Release2: release2,
                                    Rank: index +1,
                                    FID:rec.get('FormattedID'),
                                    'SelectedModel': rec
                                };

                                Ext.Array.each(me.fetchFields,function(field){
                                    value = rec.data[field];
                                    if ( value && Ext.isObject(value) ) {
                                        if('Milestones'==field || 'Tags' == field){
                                            var milestones = []
                                            Ext.Array.each(value._tagsNameArray,function(tag){
                                                milestones.push(tag.Name);
                                            });
                                            with_date_flag[field] = milestones.toString();
                                        }else{
                                            with_date_flag[field]=value._refObjectName; 
                                        }
                                    }
                                    else if('FormattedID' == field){
                                            with_date_flag[field]=me._getFormattedIdByRecord(rec.data);
                                    }
                                    else{
                                        with_date_flag[field]=value;
                                    }                                    
                                });                             

                                model_with_dates.push(with_date_flag);
                               
                        });

                        deferred.resolve(model_with_dates);              


                    } else {
                        me.logger.log("Failed: ", operation);
                        deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                    }
                }
            });
        }

        
        return deferred.promise;

    },

    _getFormattedIdByRecord: function(record){
        var url = Rally.nav.Manager.getDetailUrl(record);
        var anchor = "<b><a href='" + url + "' target='_blank'>" + record.FormattedID + "</a></b>";
        return anchor;
    },

    _getFetchFields: function(){
        var fetchFields = [];
        fetchFields = this._getAlwaysSelectedFields();
        fetchFields.push('Parent','Feature','FormattedID','Name');
        return fetchFields;
    },

    _loadAStoreWithAPromise: function(model_name, model_fields,model_filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: ['ObjectID','FormattedID','Name'],
            filters: model_filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _displayGrid: function(records){
        this.down('#display_box').removeAll();
        //Custom store
        var store = Ext.create('Rally.data.custom.Store', {
            data: records,
            remoteSort: false
        });


        this.logger.log('_displayGrid>>',store);


         this.down('#selector_box').add({
            xtype:'rallybutton',
            itemId:'export_button',
            text: 'Download CSV',
            margin:10,

            disabled: false,
            iconAlign: 'right',
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            },
            margin: '10',
            scope: this
        });

        var grid = {
            xtype: 'rallygrid',
            store: store,
            showRowActionsColumn: false,
            editable: false,
            //defaultSortToRank: true,
            sortableColumns: true,            
            columnCfgs: this._getColumns(),
            width: this.getWidth()
        }

        this.logger.log('grid before rendering',grid);

        this.down('#display_box').add(grid);





    },

    _export: function(){
        var grid = this.down('rallygrid');
        var me = this;

        if ( !grid ) { return; }
        
        this.logger.log('_export',grid);

        var filename = Ext.String.format('quarter-commit-snapshot.csv');

        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities._getCSVFromCustomBackedGrid(grid) } 
        ]).then({
            scope: this,
            success: function(csv){
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },


    _getColumns: function() {
        var columns = [];
        var me = this;
        columns.push({dataIndex:'FID',text:'FormattedID', flex: 1, hidden:true });

        Ext.Array.each(me._getAlwaysSelectedFields(),function(col){
            if(col == 'FormattedID'){
                columns.push({dataIndex:col,
                                text:col, 
                                flex: 1, 
                                _csvIgnoreRender:true
                            }); 
            }else if(col == 'DragAndDropRank') {
                columns.push({dataIndex:'Rank',
                                text:col, 
                                flex: 1 
                            }); 
            }else if(col.indexOf('Date') > -1){
                columns.push({dataIndex:col,
                              text:col, 
                              flex: 1,
                              xtype: 'datecolumn',   
                              format:'m-d-Y' 
                            });                 

            }else {
                columns.push({dataIndex:col,
                              text:col, 
                              flex: 1
                            }); 
            }
           
        });

        columns.push({dataIndex:'ArtifactHierarchy',text:'Artifact Hierarchy', flex: 2, sortable: false,
                                    renderer: function(ArtifactHierarchy){ 
                                        return ArtifactHierarchy.html;
                                    }, 
                                    exportRenderer: function(ArtifactHierarchy){ 
                                        return ArtifactHierarchy.text;
                                    }
                                });
        columns.push({dataIndex:'PlanEstimate1',text:'PlanEstimate for Date 1', flex: 1 });
        columns.push({dataIndex:'PlanEstimate2',text:'PlanEstimate for Date 2', flex: 1 });
        columns.push({dataIndex:'PlannedEndDate1',text:'PlannedEndDate for Date 1', flex: 1, xtype: 'datecolumn',   format:'m-d-Y'  });
        columns.push({dataIndex:'PlannedEndDate2',text:'PlannedEndDate for Date 2', flex: 1, xtype: 'datecolumn',   format:'m-d-Y'  });  
        columns.push({dataIndex:'Release1',text:'Release for Date 1', flex: 1 });
        columns.push({dataIndex:'Release2',text:'Release for Date 2', flex: 1 });  
        //columns.push({dataIndex:'Date1',text:'Date 1 Commit?', flex: 1 });
        //columns.push({dataIndex:'Date2',text:'Date 2 Commit?', flex: 1 });

        return columns;
    },

    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('QCSApp', {
                   name: 'Quarter Commit Snapshot'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>
